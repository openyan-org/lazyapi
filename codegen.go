package lazyapi

import (
	"fmt"
	"os"
	"os/exec"
	"strings"
	"text/template"
)

const mainTemplate = `// Generated by OpenYan LazyAPI

package lazyapi_api

import (
	"log"
	"net/http"
	"os"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"database/sql"
	_ "{{if eq .DatabaseEngine "postgresql"}}github.com/lib/pq{{else if eq .DatabaseEngine "mysql"}}github.com/go-sql-driver/mysql{{end}}" // Database driver
)

func main() {
	dbURL := os.Getenv("DATABASE_URL")
	if dbURL == "" {
		log.Fatal("DATABASE_URL is required")
	}

	db, err := sql.Open("{{.DatabaseEngine}}", dbURL)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	defer db.Close()

	r := chi.NewRouter()
	r.Use(middleware.Logger)

	// Define routes
	{{range .Endpoints}}
	r.{{.Method}}("{{.Path}}", {{.BodySchema.Name}}Handler)
	{{end}}

	log.Println("Server is running at http://localhost:8080")
	http.ListenAndServe(":8080", r)
}
`

const repositoriesTemplate = `// Generated by OpenYan LazyAPI

package lazyapi_api

import (
	"database/sql"
	"fmt"
	"github.com/google/uuid"
)

{{range .Models}}
// {{.Name}} represents the {{.Name}} model
type {{.Name}} struct {
	{{range .Fields}}{{.Name}} {{if eq .Type "uuid"}}uuid.UUID{{else if eq .Type "text"}}string{{else}}{{.Type}}{{end}} ` + "`json:\"{{.Name}}\"`" + `
	{{end}}
}

// Insert{{.Name}} inserts a new {{.Name}} into the database
func Insert{{.Name}}(db *sql.DB, {{range .Fields}}{{.Name}} {{if eq .Type "uuid"}}uuid.UUID{{else if eq .Type "text"}}string{{else}}{{.Type}}{{end}}, {{end}}) error {
	query := "INSERT INTO {{.Name}} ({{range $index, $field := .Fields}}{{if $index}}, {{end}}{{$field.Name}}{{end}}) VALUES ({{range $index, $field := .Fields}}{{if $index}}, {{end}}?{{end}})"
	_, err := db.Exec(query, {{range .Fields}}{{.Name}}, {{end}})
	if err != nil {
		return fmt.Errorf("failed to insert {{.Name}}: %w", err)
	}
	return nil
}
{{end}}
`

const handlersTemplate = `// Generated by OpenYan LazyAPI

package lazyapi_api

import (
	"encoding/json"
	"net/http"
	"repositories"
)

{{range .Endpoints}}
// {{.BodySchema.Name}}Handler handles {{.Method}} requests to {{.Path}}
func {{.BodySchema.Name}}Handler(w http.ResponseWriter, r *http.Request) {
	switch r.Method {
	case "POST":
		var body repositories.{{.BodySchema.Name}}
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}

		// Call repository function
		err := repositories.Insert{{.BodySchema.Name}}(nil /* DB */, {{range .BodySchema.Fields}}body.{{.Name}}, {{end}})
		if err != nil {
			http.Error(w, "Failed to insert record", http.StatusInternalServerError)
			return
		}

		w.WriteHeader(http.StatusCreated)
		json.NewEncoder(w).Encode(map[string]string{"message": "Created successfully"})
	default:
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
	}
}
{{end}}
`

func (api *API) GenerateSourceCode() error {
	outDir := "out"
	err := os.MkdirAll(outDir, os.ModePerm)
	if err != nil {
		return fmt.Errorf("failed to create output directory: %w", err)
	}

	files := map[string]string{
		"out/main.go":         mainTemplate,
		"out/repositories.go": repositoriesTemplate,
		"out/handlers.go":     handlersTemplate,
	}

	// Generate Go source files
	for fileName, tmplContent := range files {
		fmt.Printf("Generating file: %s\n", fileName)
		err := writeTemplate(fileName, tmplContent, api)
		if err != nil {
			return fmt.Errorf("failed to write %s: %w", fileName, err)
		}
	}

	// Initialize Go module and add dependencies
	fmt.Println("Initializing Go module and installing dependencies...")
	err = runCommand("go mod init lazyapi_api", outDir)
	if err != nil {
		return fmt.Errorf("failed to initialize Go module: %w", err)
	}

	// Dynamically add dependencies
	dependencies := []string{
		"github.com/google/uuid",
		"github.com/go-chi/chi/v5",
	}
	if api.DatabaseEngine == "postgresql" {
		dependencies = append(dependencies, "github.com/lib/pq")
	} else if api.DatabaseEngine == "mysql" {
		dependencies = append(dependencies, "github.com/go-sql-driver/mysql")
	}

	for _, dep := range dependencies {
		err = runCommand(fmt.Sprintf("go get %s", dep), outDir)
		if err != nil {
			return fmt.Errorf("failed to add dependency %s: %w", dep, err)
		}
	}

	// Tidy up modules
	err = runCommand("go mod tidy", outDir)
	if err != nil {
		return fmt.Errorf("failed to tidy modules: %w", err)
	}

	fmt.Println("Dependencies installed successfully.")
	return nil
}

// writeTemplate writes the content to a file based on a template
func writeTemplate(fileName, tmplContent string, data interface{}) error {
	tmpl, err := template.New(fileName).Parse(tmplContent)
	if err != nil {
		return err
	}

	file, err := os.Create(fileName)
	if err != nil {
		return err
	}
	defer file.Close()

	return tmpl.Execute(file, data)
}

// runCommand runs a shell command in the given directory
func runCommand(cmd, dir string) error {
	parts := strings.Split(cmd, " ")
	c := exec.Command(parts[0], parts[1:]...)
	c.Dir = dir
	c.Stdout = os.Stdout
	c.Stderr = os.Stderr
	return c.Run()
}
